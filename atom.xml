<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lulula</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-04T08:50:22.069Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lulula</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gulp初步学习和使用</title>
    <link href="http://yoursite.com/2018/03/04/gulp%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/04/gulp初步学习和使用/</id>
    <published>2018-03-04T08:13:19.000Z</published>
    <updated>2018-03-04T08:50:22.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单来说，它所实现的效果就是将所有的js文件整合到一个js文件里面，并且压缩成一行。在node环境下运行,具体查看 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">官网</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步：我们打开git的命令行工具，去命令行npm install -g gulp（安装全局gulp）。</p><p>安装一下全局的gulp 等待几分钟之后就下载好了，然后输入gulp –v来查看一下gulp是否存在以及版本是多少。</p><p>第二步：在我们项目的文件夹中（根目录下）打开命令行。输入命令npm install –save-dev gulp（下载本地gulp），等待下载完毕会出现一个本地的文件夹node_modules文件夹。这就说明我们本地的gulp已经下载好了。</p><p>第三步：就在上图这个根目录中，我们新建一个js，名字叫gulpfile.js</p><p>这里面是用来写我们gulp运行的一些行为，比如合并，压缩，重命名啊，等等。先配置，到后面一看就明白了</p><p>到了第四步我们要了解我们需要做什么：</p><p>在项目的根目录中的命令行中，输入我们要用到的东西，这些都是局部的：</p><p>如果想要压缩js代码：$ npm install –save-devgulp-uglify</p><p>如果想要压缩css代码：$ npm install–save-dev gulp-minify-css</p><p>如果想要删除文件夹和文件的命令：$ npm install–save-dev gulp del</p><p>如果想要less转换为css插件：$ npm install–save-dev gulp-less</p><p>如果想要合并文件：$ npm install –save-devgulp-concat</p><p>如果想要给文件重新命名：$ npm install –save-devgulp-rename</p><p>第四步：按需求下载好自己所需要的局部组件，然后下一步就是要去gulpfile.js里面配置我们gulp运行时候的行为了</p><p>首先引入刚刚下载好的组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//引入gulp</span><br><span class="line"></span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">//引入组件（这里面有：重命名，压缩js的组件，合并js的组件）</span><br><span class="line"></span><br><span class="line">var concat = require(&apos;gulp-concat&apos;);</span><br><span class="line"></span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line"></span><br><span class="line">var rename = require(&apos;gulp-rename&apos;);</span><br></pre></td></tr></table></figure></p><p>组件引入之后，我们开始写我们gulp的行为了，也就是我们运行gulp的时候他需要怎么做。</p><p>//举个例子：这是把js压缩并且合并的一个行为</p><p>其中：task（任务）：每一个gulp的命令都是一个任务。</p><p>src（引入）：引入需要构建的文件路径。</p><p>dest（输入）：输出文件的路径。</p><p>watch（监听）：监听文件的变化，可以自动执行任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//我给这个行为起了一个名字为” scripts”，然后紧接着一个回掉函数记录他的行为</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;scripts&apos;, function() &#123;</span><br><span class="line"></span><br><span class="line">//引入js文件夹下面的所有.js格式的文件，*代表全部，当然也可以针对到某一个js文件。</span><br><span class="line"></span><br><span class="line">gulp.src(&apos;./js/*.js&apos;)</span><br><span class="line"></span><br><span class="line">//concat就是我们下载好，然后还引进来的那个组件，合并他们所有的js文件合并玩了名字叫做all.js</span><br><span class="line"></span><br><span class="line">.pipe(concat(&apos;all.js&apos;))</span><br><span class="line"></span><br><span class="line">//合并完之后我将他输出到根目录下的一个新的文件夹“dist“里面</span><br><span class="line"></span><br><span class="line">.pipe(gulp.dest(&apos;./dist&apos;))</span><br><span class="line"></span><br><span class="line">//虽然所有js文件合并到了all.js里面，但是他们现在格式还是“生前“的样子，我需要将它们变为一行！这时候就用到了一个重命名：rename我给all.js起了一个名字叫做all.min.js，紧接着用到了引入的js压缩组件uglify()，然后那么多行的js文件就变为了一两行的</span><br><span class="line"></span><br><span class="line">.pipe(rename(&apos;all.min.js&apos;))</span><br><span class="line"></span><br><span class="line">.pipe(uglify())</span><br><span class="line"></span><br><span class="line">//处理完之后我也将他输出到根目录下的文件夹“dist“里面</span><br><span class="line"></span><br><span class="line">.pipe(gulp.dest(&apos;./dist&apos;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这时候在gulpfile.js文件里面相当于记录了两种行为了，一种是引入，一种是操作不要以为这时候就大功告成了，还有最重要的一部：我们需要继续写一个默认的任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//默认任务default，这个名字是必不可少的</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;,function()&#123;</span><br><span class="line"></span><br><span class="line">//run一下（默认执行的是我写的名字为&apos;scripts&apos;进行js代码压缩的行为）</span><br><span class="line"></span><br><span class="line">gulp.run(&apos;scripts&apos;);</span><br><span class="line"></span><br><span class="line">//监听文件变化（如果js文件有变化，就会执行下面的行为）</span><br><span class="line"></span><br><span class="line">gulp.watch(&apos;./js/*.js&apos;, function()&#123;</span><br><span class="line"></span><br><span class="line">gulp.run(&apos;lint&apos;, &apos;sass&apos;, &apos;scripts&apos;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>有人要问，如果不写默认行为可以不，回答是当然不可以，如果不写默认行为会报错的</p><p>最后一步：运行</p><p>既然都已经配置好了，我们就来运行一下吧，回到项目的根目录中，我们打开git的命令行，输入gulp并且回车，很好，出现这些时间表示我们已经成功了。然后我们会看到根目录自己出现了一个名字叫做dist的文件夹，小心翼翼的打开里面，惊喜的发现了all.js以及all.min.js两个文件静静的躺在里面。</p><p>如果运行：gulp是执行gulpfile.js里面所有的任务。如果此时有一个压缩css的任务，有一个压缩js的任务，分别叫做script和css</p><p>我们只想压缩一下js，那么就执行gulp+任务名称也就是：$ gulp script完成！！！！！只会压缩js，不回去动css的代码。</p><p>作者：传奇狗<br>链接：<a href="https://www.jianshu.com/p/bedb9ffcfba1" target="_blank" rel="noopener">https://www.jianshu.com/p/bedb9ffcfba1</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;简单来说，它所实现的效果就是将所有的js文件整合到一个js文件里面，并且压缩成一行。在node环境下运行,具体查看 &lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="javascrip,node" scheme="http://yoursite.com/tags/javascrip-node/"/>
    
  </entry>
  
  <entry>
    <title>前端优化法则</title>
    <link href="http://yoursite.com/2018/02/11/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2018/02/11/前端优化法则/</id>
    <published>2018-02-11T10:56:53.000Z</published>
    <updated>2018-02-11T12:58:10.480Z</updated>
    
    <content type="html"><![CDATA[<p>共35条分类</p><ul><li><p>内容</p><ul><li>减少HTTP请求</li><li>减少DNS查询 </li><li>避免重定向 </li><li>Ajax缓存化</li><li>后载入组件</li><li>预先载入组件</li><li>减少DOM元素数量</li><li>跨域分离组件</li><li>最少化iframe</li><li>避免404错误</li></ul></li><li><p>服务端</p><ul><li>使用CDN（内容分布网络） </li><li>增加过期时间或者可控制缓存的请求头 </li><li>使用Gzip组件</li><li>配置ETags（实体标签） </li><li>提前刷新缓冲区</li><li>Ajax请求使用Get方法</li><li>避免空的图片src</li></ul></li><li><p>Cookie</p><ul><li>减少Cookie大小</li><li>为组件使用无Cookie域</li></ul></li><li><p>CSS</p><ul><li>将样式放在顶部 </li><li>避免使用CSS表达式 </li><li>选择而不要@import</li><li>避免过滤器</li></ul></li><li><p>JavaScript</p><ul><li>将JS放在底部 </li><li>使用外部的JS和CSS </li><li>压缩JS和CSS </li><li>去掉重复的脚本 </li><li>最小化Dom读取</li><li>开发灵活的事件处理器</li></ul></li><li><p>图片</p><ul><li>优化图片</li><li>优化CSS Sprites（CSS精灵）</li><li>在HTML中不要缩放图片</li><li>制作小的和可缓存的favicon.ico</li></ul></li><li><p>移动</p><ul><li>组件维持在25kb以下</li><li>将组件放入复合的文档中</li></ul></li></ul><p>转自[<a href="https://huangyijie.com/2016/02/29/rules-of-front-end-optimization/" target="_blank" rel="noopener">https://huangyijie.com/2016/02/29/rules-of-front-end-optimization/</a>]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;共35条分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少HTTP请求&lt;/li&gt;
&lt;li&gt;减少DNS查询 &lt;/li&gt;
&lt;li&gt;避免重定向 &lt;/li&gt;
&lt;li&gt;Ajax缓存化&lt;/li&gt;
&lt;li&gt;后载入组件&lt;/li&gt;
&lt;li&gt;预先载入组件&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="优化" scheme="http://yoursite.com/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="javascript,css,前端" scheme="http://yoursite.com/tags/javascript-css-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js刷题记录</title>
    <link href="http://yoursite.com/2018/02/10/js%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/02/10/js刷题记录/</id>
    <published>2018-02-10T08:36:31.000Z</published>
    <updated>2018-02-10T11:26:28.232Z</updated>
    
    <content type="html"><![CDATA[<p>3、一个数组 par 中存放有多个人员的信息，每个人员的信息由年龄 age 和姓名 name 组成，如{age: 2, name: ‘xx’}。请写一段 JS 程序，对这个数组按年龄从小到大进行排序。</p><p>优化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function parSort(par) &#123;</span><br><span class="line">    return par.sort(function(arr1, arr2) &#123;</span><br><span class="line">        return arr1.age &gt; arr2.age ? -1 : 1;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、有字符串 var = ‘abc345efgabcab’，请写出 3 条 JS 语句分别实现如下 3 个功能：<br>1）去掉字符串中的a、b、c 字符，形成结果：’345efg’<br>2）将字符串中的数字用中括号括起来，形成结果：’abc3[5]efgabcab’<br>3）将字符串中的每个数字的值分别乘以 2，形成结果：’abc6810efgabcab’</p><p>我的：</p><pre><code>var str= &apos;abc345efgabcab&apos;;var arrStr=str.split(&apos;&apos;);var result= arrStr.filter(function(s){    return s==&apos;a&apos; || s==&apos;b&apos; || s==&apos;c&apos;?&apos;&apos;:s}).join(&apos;&apos;)var result=[];arrStr.forEach(function(s){    var num=s;    if(Number(s)==s){        num=&apos;[&apos;+num+&apos;]&apos;    }    result.push(num)})result.join(&apos;&apos;);</code></pre><p>这个时候对正则表达式还不了解，看了别人的发现用正则表达式会非常简洁</p><p>优化：</p><pre><code>// 1)str.replace(/([a-c])/g, &apos;&apos;);// 2)str.replace(/(\d)/g, &apos;[$1]&apos;);// 3)str.replace(/(\d)/g, function(num) {return num*2;});</code></pre><p>5、请写一段 JS 程序类，定义一个列表类List，该类包含两个成员：属性 length（表示列表中的元素个数）和方法 add （像列表中添加元素），其中要求构造函数和 add 方法的参数为动态参数。</p><p>我的：</p><pre><code>function List() {        this.data = [];        for(var i in arguments){            this.data.push(arguments[i])        }        this.length = this.data.length;        this.add = function () {            for(var i in arguments){                this.data.push(arguments[i])                this.length++;            }        }    }    var newlist = new List(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;);    //newlist.add(&apos;a&apos;, &apos;b&apos;)</code></pre><p>arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性</p><p>6、请问这个 JS 程序有什么问题？应该如何优化？</p><pre><code>function setStyle(element) {    element.style.fontWeight = &quot;bold&quot;;    element.style.textDecoration = &quot;none&quot;;    element.style.color = &quot;#000000&quot;;}</code></pre><p>优化：</p><pre><code>function setStyle(element) {    if (!element.style) {        return;    }    var eleStyle = element.style;    eleStyle.fontWeight = &quot;bold&quot;;    eleStyle.textDecoration = &quot;none&quot;;    eleStyle.color = &quot;#000000&quot;;}</code></pre><p>7、请写出一下正则表达式：<br>1）匹配一个全部是数字的字符串<br>2）提取一个 url 所使用的协议类型如 http、ftp 和 host 名称</p><p>我的：</p><pre><code>var patt1= /^\d+$/var patt2 = /^(\w+):\/\/w*\.?(\w+)\.\w+\/.*\.(\w+)/;</code></pre><p>8、请使用闭包的方式，写一段 JS 程序实现如下功能：函数每调用一次则该函数的返回值加 1。</p><p>我的：</p><pre><code>function creatSumFun(){        var s=0;        return function(){            return ++s;        }    }    var sumFun=creatSumFun();    sumFun();</code></pre><p>9、请写出下面 JS 程序中几个 document.write 的结果：</p><pre><code>function Parent() {    this.a = 1;    this.b = [1, 2, this.a];    this.c = {demo: 5};    this.show = function() {        document.write(this.a + &apos; &apos; + this.c.demo + &apos;:&apos; + this.b + &apos;&lt;br/&gt;&apos;)    }}function Child() {    this.a = 2;    this.change = function() {        this.b.push(this.a);        this.a = this.b.length;        this.c.demo = this.a++;    }}Child.prototype = new Parent();var parent = new Parent();var child1 = new Child();var child2 = new Child();child1.a = 11;child2.a = 12;parent.show();child1.show();child2.show();child1.change();child2.change();parent.show();child1.show();child2.show();</code></pre><p>我的：无</p><p>真的是基础不行，看了好久发现是js的继承，继续努力！<br>11、请用 js 程序实现二分算法。</p><pre><code>function midSearch(arr , target){    var low=0;    var heigh=arr.length-1;    while (low&lt;=heigh) {        var mid=parseInt(low+(heigh-low)/2);        if(target&gt;arr[mid]){ low=mid+1 }        if(target&lt;arr[mid]){ heigh=mid-1 }        if(target==arr[mid]){ return mid}    }    return low}</code></pre><p>12、有这样一个 URL：<a href="http://vip.qq.com/a.php?a=1&amp;b...，请写一段" target="_blank" rel="noopener">http://vip.qq.com/a.php?a=1&amp;b...，请写一段</a> JS 程序提取 URL 中的各个参数（参数名和参数个数不确定），将其按 key-value 形式返回到一个 json 结构中，如{a:’1’,b:’2’,c:’’,d:’xxx’,e:undefined}。</p><pre><code>function getQueJson(url) {    var url=url.split(&apos;?&apos;);    var part = /\w+(=)?(\w+)*/g;    var str = url.match(part);    var json = {};    for (var i = 0; i &lt; str.length; i++) {        var s = str[i].split(&apos;=&apos;);    json[s[0]] = s[1]==&apos;&apos;?undefined:s[1];    }     return json }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3、一个数组 par 中存放有多个人员的信息，每个人员的信息由年龄 age 和姓名 name 组成，如{age: 2, name: ‘xx’}。请写一段 JS 程序，对这个数组按年龄从小到大进行排序。&lt;/p&gt;
&lt;p&gt;优化：&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>css 居中总结</title>
    <link href="http://yoursite.com/2018/02/10/css%E5%B1%85%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/10/css居中总结/</id>
    <published>2018-02-10T08:36:31.000Z</published>
    <updated>2018-02-10T10:04:03.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ul><li><strong>内联元素（<code>inline</code>、<code>inline</code>-*）</strong></li></ul><p>此类元素需要水平居中，则父级元素必须是块级元素(block level)，且父级元素上需要这样设置样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>块级元素</strong></li></ul><p>块级元素水平居中，需要设置<code>margin-left</code>和<code>margin-right</code>为<code>auto</code>，且需要显示设置宽度，不然就占满整行，就无所谓水平居中了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.block &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>同一行多个块级元素</strong></li></ul><p>如果是在同一行里需要居中多个块级元素，可以尝试下面的两种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* 方法一 */</span><br><span class="line">.parent &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">/* 方法二 */</span><br><span class="line">.parent &#123;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    display: -ms-flexbox;</span><br><span class="line">    display: flex;</span><br><span class="line">    -webkit-box-pack: center;</span><br><span class="line">    -ms-flex-pack: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>垂直居中在CSS中比较不好处理。</p><ul><li><strong>单行文本</strong></li></ul><p>通过设置上下内间距一致达到垂直居中的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.single-line &#123;</span><br><span class="line">    padding-top: 10px;</span><br><span class="line">    padding-bottom: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置<code>height</code>和<code>line-height</code>一致达到垂直居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.single-line &#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>多行文本</strong></li></ul><p>通过使用表格来垂直居中，但是这种方法显得很累赘：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;通过表格使得多行文本自动垂直居中通过表格使得多行文本自动垂直居中通过表格使得多行文本自动垂直居中&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>通过设置<code>vertical-align</code>属性和将元素设置为<code>table-cell</code>，且父元素要设置为<code>table</code>元素，这个和上面那种原理其实是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过伸缩盒来垂直居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.flex-vertically &#123;</span><br><span class="line">    -webkit-align-items: center;</span><br><span class="line">    -ms-flex-align: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>块级元素垂直居中</strong></li></ul><p>知道块元素的高度，那么使用绝对定位和负的<code>margin</code>即可实现垂直居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-top: -25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>块级元素高度是可变的，这个时候就需要用<code>transform</code>的Y轴平移来实现了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用<code>flexbox</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    display: flexbox;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果对于块级元素高度不是固定的，且不由内容决定，那么还可以这么设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 30%;</span><br><span class="line">    bottom: 30%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><p>水平垂直居中就是把上面介绍的方法相结合就可以了。</p><ul><li><p><strong>知道宽高的盒子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: realtive;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    posotion: absoltue;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-left: -150px;</span><br><span class="line">    margin-top: -150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>不知道宽高的盒子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: realtive;</span><br><span class="line">&#125;</span><br><span class="line">.parent div &#123;</span><br><span class="line">    posotion: absoltue;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用flexbox</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上转自[<a href="http://bubuzou.com/2017/04/css-center-skill/" target="_blank" rel="noopener">http://bubuzou.com/2017/04/css-center-skill/</a>]</p><ul><li><strong>补充</strong></li></ul><p>垂直水平居中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;c&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    .a&#123;</span><br><span class="line">        display: table;</span><br><span class="line">    &#125;</span><br><span class="line">    .b&#123;</span><br><span class="line">        display: table-cell;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">    .c&#123;</span><br><span class="line">        width: 30px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内联元素（&lt;code&gt;inline&lt;/code&gt;、&lt;code&gt;inline&lt;/code&gt;-*）&lt;
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
